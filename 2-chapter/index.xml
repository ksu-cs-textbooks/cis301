<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Truth Tables :: CIS 301 Textbook</title><link>https://textbooks.cs.ksu.edu/cis301/2-chapter/</link><description/><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Jan 2025 15:05:00 -0600</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cis301/2-chapter/index.xml" rel="self" type="application/rss+xml"/><item><title>Operators and Circuits</title><link>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_1-opscircuits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_1-opscircuits/</guid><description>In this chapter, we review basic notions about gates and learn the relationship between circuits and assignment-based computer programs. This sets the stage for analyzing modern programs.
Logical operators There are four basic logic gates, with corresponding logical operators:
Meaning Logical Operator Logic Gate p AND q p ∧ q p OR q p ∨ q NOT p ¬p p IMPLIES q p → q In the above drawings, the input wires are labelled with the names P and Q.</description></item><item><title>Truth Tables in Logika</title><link>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_2-logikatruth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_2-logikatruth/</guid><description>Now that we’ve seen the four basic logic gates and truth tables, we can put them together to build bigger truth tables for longer logical formulae.
Operator precedence Logical operators have a defined precedence (order of operations) just as arithmetic operators do. In arithmetic, parentheses have the highest precedence, followed by exponents, then multiplication and division, and finally addition and subtraction.
Here is the precedence of the logical operators, from most important (do first) to least important (do last):</description></item><item><title>Satisfiability</title><link>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_3-satis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_3-satis/</guid><description>We say that a logical statement is satisfiable when there exists at least one truth assignment that makes the overall statement true.
In our Logika truth tables, this corresponds to statements that are either contingent or a tautology. (Contradictory statements are NOT satisfiable.)
For example, consider the following truth tables:
* ----------------------- p q r # p →: q V ¬r ∧ p ----------------------- T T T # T T F F T T F # T T T T T F T # F F F F T F F # T T T T F T T # T T F F F T F # T T T F F F T # T F F F F F F # T F T F ------------------------ Contingent T: [T T T] [T T F] [T F F] [F T T] [F T F] [F F T] [F F F] F: [T F T]And</description></item><item><title>Logical Equivalence</title><link>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_4-logicalequiv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_4-logicalequiv/</guid><description>Two (or more) logical statements are said to be logically equivalent IFF (if and only if, ↔) they have the same truth value for every truth assignment; i.e., their truth tables evaluate exactly the same. (We sometimes refer to this as semantic equivalence.)
An example of logically equivalent statements are q ∧ p and p ∧ (q ∧ p):
* -------------- p q # (p ∧ q) -------------- T T # T T F # F F T # F F F # F --------------- Contingent T: [T T] F: [F F] [F T] [T F] * ------------------- p q # p ∧ (q ∧ p) ------------------- T T # T T T F # F F F T # F F F F # F F -------------------- Contingent T : [T T] F : [F F] [F T] [T F]In these examples, notice that exactly the same set of truth assignments makes both statements true, and that exactly the same set of truth assignments makes both statements false.</description></item><item><title>Semantic Entailment</title><link>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_5-sementail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis301/2-chapter/2_5-sementail/</guid><description>Definition We say a set of premises, p1, p2, …, pn semantically entail a conclusion c, and we write:
p1, p2, ..., pn ⊨ cif whenever we have a truth assignment that makes p1, p2, …, pn all true, then c is also true for that truth assignment.
(Note: we can use the ASCII replacement |= instead of the Unicode ⊨, if we want.)
Showing semantic entailment Suppose we have premises p ∧ q and p → r.</description></item></channel></rss>