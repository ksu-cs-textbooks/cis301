<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sequences in Loops :: CIS 301 Textbook</title><link>https://textbooks.cs.ksu.edu/cis301/10-chapter/10_4-seqloop/index.html</link><description>We also must consider sequences when writing loop invariants. Typically, we must include the following in our invariant:
If the sequence changes in the loop Describe what sequence elements have already changed in the loop (and what their new values are) Describe what sequence elements still have their original value Prove lower and upper bounds for whatever variable is being used as a sequence position (so we can be certain we will not go past the bounds of the sequence) State that the sequence size does not change (to reinforce that the variable used as the sequence position will not go out of bounds) List the sequence along with other changing variables in the loop invariant block’s Modifies clause If the sequence does not change in the loop Consider what we are doing with each sequence element as we look at them. Usually we have another variable that is storing our progress (and often, this variable is returned from the function after the loop). Express how the variable’s value relates to the part of the sequence we’ve looked at so far – this statement should look very similar to your postcondition, but should only describe part of the sequence. Prove lower and upper bounds for whatever variable is being used as a sequence position (so we can be certain we will not go past the bounds of the sequence) Example: add one to all program Suppose we have the following program, which adds one to every element in a sequence parameter:</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis301/10-chapter/10_4-seqloop/index.xml" rel="self" type="application/rss+xml"/></channel></rss>