<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Logika Predicate Logic Proof Syntax :: CIS 301 Textbook</title><link>https://textbooks.cs.ksu.edu/cis301/6-chapter/6_0-logikasyntax/</link><description>We will use the following format in Logika to start a natural deduction proof for predicate logic. Each proof will be saved in a new file with a .sc (Scala) extension:
// #Sireum #Logika //@Logika: --manual --background type import org.sireum._ import org.sireum.justification._ import org.sireum.justification.natded.prop._ import org.sireum.justification.natded.pred._ @pure def ProofName[T](pred1: T => B @pure, pred2: T => B @pure, ..., indiv1: T, indiv2: T, ...): Unit = { Deduce( //@formatter:off (comma-separated list of premises with variable1, variable2, .</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis301/6-chapter/6_0-logikasyntax/index.xml" rel="self" type="application/rss+xml"/></channel></rss>